syntax = "proto3";

package messaging; // Define package name

// Necessary imports for standard Google types
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
// No import for common.proto as definitions are included below

// C# namespace for generated code
option csharp_namespace = "TradeyBay.Messaging.Grpc";

//--------------------------------------------------------------------------
// Common Type Definitions (Previously in common.proto)
//--------------------------------------------------------------------------

// Represents a unique user identifier.
message UserIdentifier {
    int32 user_id = 1; // Corresponds to Azure AD B2C object ID (oid/sub claim). Required.
}

// Represents contextual information, primarily the Ad Listing ID.
message ContextInfo {
    int32 listing_id = 1; // Required.
    // Add other context types if needed later directly here.
}

// Defines the different types of messages within the system.
enum MessageType {
    TEXT = 0;     // A standard text message from a user.
    MEDIA = 1;    // A message containing media (image, video, doc) with a link.
    SYSTEM = 2;   // A message generated by the system (e.g., "Ad expired").
    CALL_LOG = 3; // A system message representing a call event in the chat history.
}

// Represents information about an uploaded media file.
message MediaInfo {
    string media_url = 1; // URL to view/download the media from Azure Blob Storage. Required.
    string file_name = 2; // Original filename. Optional.
    string mime_type = 3; // MIME type (e.g., "image/jpeg"). Optional.
    int64 size_bytes = 4; // File size. Optional.
}

//--------------------------------------------------------------------------
// Service Definition: Defines the RPC methods offered by the Messaging service
//--------------------------------------------------------------------------
service Messaging {
    // Initiates or gets an existing 1:1 chat based on context (e.g., Ad Listing).
    rpc GetOrCreateChat(GetOrCreateChatRequest) returns (ChatInfo);

    // Sends a message from the authenticated user to a specific chat they participate in.
    rpc SendMessage(SendMessageRequest) returns (Message);

    // Establishes a persistent server-streaming connection for the authenticated client
    // to receive new messages in real-time for all chats they are a participant in.
    rpc SubscribeToMessages(SubscribeRequest) returns (stream Message);

    // Retrieves a paginated history of messages for a specific chat, ordered newest to oldest.
    rpc GetChatHistory(GetChatHistoryRequest) returns (GetChatHistoryResponse);

    // Generates a short-lived, secure SAS URL allowing the authenticated client
    // to upload a media file directly to Azure Blob Storage.
    rpc GetMediaUploadUrl(GetMediaUploadUrlRequest) returns (GetMediaUploadUrlResponse);

     // Allows authorized backend services to inject system-generated messages into a chat.
    rpc InjectSystemMessage(InjectSystemMessageRequest) returns (google.protobuf.Empty);
}

//--------------------------------------------------------------------------
// Message Definitions specific to or using types within this file
//--------------------------------------------------------------------------

// Represents the sender identity, including optional business representation.
message SenderInfo {
    UserIdentifier user = 1;         // Using UserIdentifier defined above. Required.
    optional string acting_as_business_id = 2; // Optional.
}

// Information about a 1:1 chat conversation.
message ChatInfo {
    string chat_id = 1;             // Required.
    ContextInfo context = 2;        // Using ContextInfo defined above. Required (must contain listing_id).
    repeated UserIdentifier participants = 3; // Using UserIdentifier defined above. Required (contains 2).
}

// Represents a single message within a chat conversation.
message Message {
    string message_id = 1;          // Required.
    string chat_id = 2;             // Required.
    SenderInfo sender_info = 3;     // Required.
    string content = 4;             // Required (can be empty).
    google.protobuf.Timestamp timestamp = 5; // Required.
    MessageType message_type = 6;   // Using MessageType enum defined above. Required.
    MediaInfo media_info = 7;       // Using MediaInfo defined above. Optional.
}

// Request message for the GetOrCreateChat RPC.
message GetOrCreateChatRequest {
    ContextInfo context = 1;        // Using ContextInfo defined above. Required (must contain listing_id).
}

// Request message for the SendMessage RPC.
message SendMessageRequest {
    string chat_id = 1;             // Required.
    string client_message_id = 2;   // Optional.
    string content = 3;             // Required (can be empty).
    MessageType message_type = 4;   // Using MessageType enum defined above. Required.
    MediaInfo media_info = 5;       // Using MediaInfo defined above. Optional.
    optional string acting_as_business_id = 6; // Optional.
}

// Request message for the SubscribeToMessages RPC stream.
message SubscribeRequest {
    // No parameters needed currently.
}

// Request message for the GetChatHistory RPC.
message GetChatHistoryRequest {
    string chat_id = 1;             // Required.
    int32 page_size = 2;            // Optional.
    string before_message_id = 3;   // Optional (for pagination).
}

// Response message for the GetChatHistory RPC.
message GetChatHistoryResponse {
    repeated Message messages = 1;
    bool has_more_messages = 2;
}

// Request message for the GetMediaUploadUrl RPC.
message GetMediaUploadUrlRequest {
    string file_name = 1;           // Required.
    string mime_type = 2;           // Required.
    int64 size_bytes = 3;           // Optional.
    string chat_id = 4;             // Required.
}

// Response message for the GetMediaUploadUrl RPC.
message GetMediaUploadUrlResponse {
    string upload_url = 1;          // Required.
    string blob_name = 2;           // Required.
    string media_url = 3;           // Required.
}

// Request message for the InjectSystemMessage RPC.
message InjectSystemMessageRequest {
     string chat_id = 1;            // Required.
     string content = 2;            // Required.
     MessageType message_type = 3;   // Using MessageType enum defined above. Required.
}