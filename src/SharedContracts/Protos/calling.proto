syntax = "proto3";

package calling;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "common.proto"; // Import common types

option csharp_namespace = "TradeyBay.Calling.Grpc";

service Calling {
    // Initiates a call request (optional, could go straight to JoinCall)
    // rpc InitiateCall(InitiateCallRequest) returns (InitiateCallResponse);

    // Client joins a call and establishes the signaling stream
    rpc JoinCall(JoinCallRequest) returns (stream CallSignalingEvent);

    // Sends a signal (SDP offer/answer, ICE candidate) via the stream
    // This is often handled as part of the bidirectional stream itself, not a separate RPC
    // Example: Client sends a specific message type on the stream established by JoinCall

    // Leaves or ends a call participation
    rpc LeaveCall(LeaveCallRequest) returns (google.protobuf.Empty);

    // Gets call history for the user
    rpc GetCallLogs(GetCallLogsRequest) returns (GetCallLogsResponse);
}

message CallSignalingEvent {
    enum EventType {
        SIGNAL = 0; // Contains SDP or ICE candidate from another user
        PARTICIPANT_JOINED = 1;
        PARTICIPANT_LEFT = 2;
        CALL_ENDED = 3;
        // Add other events like mute/unmute status if managed centrally
    }
    EventType event_type = 1;
    common.UserIdentifier source_user = 2; // Who sent the signal/event
    string payload = 3; // JSON string containing SDP or ICE candidate for SIGNAL type
    common.UserIdentifier affected_user = 4; // Who joined/left for PARTICIPANT events
    string call_id = 5; // ID of the call this event belongs to
}

 // Message type the *client* sends *to* the server on the JoinCall stream
message ClientSignal {
     enum SignalType {
         SEND_SIGNAL = 0; // SDP or ICE to be relayed
         // Could add others like UPDATE_MUTE_STATUS etc.
     }
     SignalType signal_type = 1;
     common.UserIdentifier target_user = 2; // Optional: direct signal to one user
     string payload = 3; // SDP or ICE candidate
}

message JoinCallRequest {
    string call_id = 1; // A unique ID for the call session (can be generated by initiator or server)
    common.ContextInfo context = 2; // Optional: Listing ID etc.
    // User ID is taken from authentication context
    // Might include initial SDP offer if initiator
}

message LeaveCallRequest {
     string call_id = 1;
      // User ID taken from context
}

message CallLog {
    string call_log_id = 1;
    string call_id = 2; // The session identifier used during the call
    common.ContextInfo context = 3;
    repeated common.UserIdentifier participants = 4;
    google.protobuf.Timestamp start_time = 5;
    google.protobuf.Timestamp end_time = 6;
    // Could add duration, status (completed, missed), etc.
}

 message GetCallLogsRequest {
    int32 page_size = 1;
    string continuation_token = 2;
     // User ID taken from context
}

 message GetCallLogsResponse {
    repeated CallLog call_logs = 1;
    string next_continuation_token = 2;
}